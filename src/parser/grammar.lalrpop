use crate::parser::{lexer, ast, Error};
use lexer::Tok;
use ast::Ast;

grammar();

pub Ast: ast::Ast = {
    #[precedence(level="1")]
    <t: Term> => t,
    #[precedence(level="2")] #[assoc(side="right")]
    <t: Ast> "?" => Ast::optional(t),
    #[precedence(level="3")] #[assoc(side="left")]
    <lhs: Ast> <rhs: Ast> => Ast::then(lhs, rhs),
    #[precedence(level="4")] #[assoc(side="left")]
    <lhs: Ast> "|" <rhs: Ast> => Ast::or(lhs, rhs),
}

Term: ast::Ast = {
    <c: "char"> => Ast::char(c),
    <"digit"> => Ast::digit(),
    <" "> => Ast::space(),
    "(" <p: Ast> ")" => p,
    "(" "!" <p: Ast> ")" => Ast::case_sensitive(p)
}

extern {
    type Location = usize;
    type Error = Error;

    enum Tok {
        "|" => lexer::Tok::Or,
        "?" => lexer::Tok::QMark,
        "(" => lexer::Tok::LParen,
        ")" => lexer::Tok::RParen,
        "!" => lexer::Tok::Exclam,
        "char" => lexer::Tok::Char { c: <char>, .. },
        "digit" => lexer::Tok::Digit,
        " " => lexer::Tok::Space,
    }
}